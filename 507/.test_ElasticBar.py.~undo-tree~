"8f3f16988d3f134ba5d4cf11ba7e81f3f73d6c27"
#s(undo-tree [nil ([nil ([nil ([nil (#2=[nil nil ((3937 . 3938) 3931) nil (24448 38878 789572 881000) 0 nil]) ((nil rear-nonsticky nil 3941 . 3942) (#("
" 0 1 (fontified nil)) . -4143) (3941 . 4144) 3938) nil (24448 38878 789589 148000) 0 nil]) ((#("def test_bezier_extraction():
    basis_1 = Bernstein_Basis.BernsteinBasis(3)
    qp = ElasticBar.compute_quadrature_points(3)
    qw = ElasticBar.compute_quadrature_weights(3)
    for func in basis_1:
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 26 (fontified t face font-lock-function-name-face) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 34 (fontified t) 34 41 (fontified t face font-lock-variable-name-face) 41 62 (fontified t) 62 74 (fontified t) 74 75 (fontified t face (rainbow-delimiters-depth-1-face)) 75 76 (fontified t face highlight-numbers-number) 76 77 (fontified t face (rainbow-delimiters-depth-1-face)) 77 82 (fontified t) 82 84 (fontified t face font-lock-variable-name-face) 84 123 (fontified t) 123 124 (fontified t face (rainbow-delimiters-depth-1-face)) 124 125 (fontified t face highlight-numbers-number) 125 126 (fontified t face (rainbow-delimiters-depth-1-face)) 126 131 (fontified t) 131 133 (fontified t face font-lock-variable-name-face) 133 173 (fontified t) 173 174 (fontified t face (rainbow-delimiters-depth-1-face)) 174 175 (fontified t face highlight-numbers-number) 175 176 (fontified t face (rainbow-delimiters-depth-1-face)) 176 181 (fontified t) 181 184 (fontified t face font-lock-keyword-face) 184 190 (fontified t) 190 192 (fontified t face font-lock-keyword-face) 192 202 (fontified t)) . 3947) (undo-tree-id0 . -202) (undo-tree-id1 . -177) (undo-tree-id2 . -202) (undo-tree-id3 . -202) (undo-tree-id4 . -30) (undo-tree-id5 . -62) (undo-tree-id6 . -202) (undo-tree-id7 . -177) (undo-tree-id8 . -202) (undo-tree-id9 . -202) (undo-tree-id10 . -177) (undo-tree-id11 . -202) (undo-tree-id12 . -127) (undo-tree-id13 . -177) (undo-tree-id14 . -78) (undo-tree-id15 . -127) (undo-tree-id16 . -30) (undo-tree-id17 . -78) (undo-tree-id18 . -78) (undo-tree-id19 . -30) (undo-tree-id20 . -127) (undo-tree-id21 . -78) (undo-tree-id22 . -78) (undo-tree-id23 . -127) (undo-tree-id24 . -30) (undo-tree-id25 . -78) (undo-tree-id26 . -30) (undo-tree-id27 . -1) (undo-tree-id28 . -31) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -31) (undo-tree-id32 . -1) (undo-tree-id33 . -177) (undo-tree-id34 . -177) (undo-tree-id35 . -202) (undo-tree-id36 . -177) (undo-tree-id37 . -30) (undo-tree-id38 . -78) (undo-tree-id39 . -30) (undo-tree-id40 . -127) (undo-tree-id41 . -78) (undo-tree-id42 . -127) (undo-tree-id43 . -127) (undo-tree-id44 . -177) (undo-tree-id45 . -127) 4124) nil (24448 38878 789770 459000) 0 nil]) ((3941 . 3943) (3938 . 3944) (#("'''" 0 1 (fontified nil face font-lock-string-face syntax-table #1=(15)) 1 2 (fontified nil face font-lock-string-face) 2 3 (face font-lock-string-face fontified nil)) . -3938) (undo-tree-id46 . -2) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -2) (undo-tree-id50 . -1) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -1) (undo-tree-id54 . -2) (undo-tree-id55 . -1) (undo-tree-id56 . -2) (undo-tree-id57 . -1) (undo-tree-id58 . -2) (undo-tree-id59 . -1) (undo-tree-id60 . -2) (undo-tree-id61 . -1) (undo-tree-id62 . -2) (undo-tree-id63 . 3) (undo-tree-id64 . -1) (undo-tree-id65 . 2) (undo-tree-id66 . -1) (undo-tree-id67 . 2) (undo-tree-id68 . -2) (undo-tree-id69 . -3) (undo-tree-id70 . -2) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (3940 . 3941) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 3940) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . 1) (undo-tree-id76 . -1) (3939 . 3940) (3938 . 3940) (#("'" 0 1 (fontified nil syntax-table #1#)) . -3938) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (3938 . 3939) (t 24447 19452 822273 414000)) nil (24448 38878 789904 807000) 0 nil]) nil nil (24448 38878 789919 923000) 0 nil] #2# 984 4 nil)